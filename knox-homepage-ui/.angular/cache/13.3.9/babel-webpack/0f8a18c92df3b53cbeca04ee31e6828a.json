{"ast":null,"code":"import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport 'rxjs/add/observable/fromEvent';\nimport 'rxjs/add/operator/filter';\nimport { BsModalHideType } from './models';\nvar EVENT_SUFFIX = 'ng2-bs3-modal';\nvar KEYUP_EVENT_NAME = \"keyup.\" + EVENT_SUFFIX;\nvar CLICK_EVENT_NAME = \"click.\" + EVENT_SUFFIX;\nvar SHOW_EVENT_NAME = \"show.bs.modal.\" + EVENT_SUFFIX;\n\nvar BsModalService =\n/** @class */\nfunction () {\n  function BsModalService() {\n    var _this = this;\n\n    this.modals = [];\n    this.$body = jQuery(document.body);\n    this.onBackdropClose$ = Observable.fromEvent(this.$body, CLICK_EVENT_NAME).filter(function (e) {\n      return jQuery(e.target).is('.modal');\n    }).map(function () {\n      return BsModalHideType.Backdrop;\n    }).share();\n    this.onKeyboardClose$ = Observable.fromEvent(this.$body, KEYUP_EVENT_NAME).filter(function (e) {\n      return e.which === 27;\n    }).map(function () {\n      return BsModalHideType.Keyboard;\n    }).share();\n    this.onModalStack$ = Observable.fromEvent(this.$body, SHOW_EVENT_NAME).do(function () {\n      var zIndex = 1040 + 10 * $('.modal:visible').length;\n      $(_this).css('z-index', zIndex);\n      setTimeout(function () {\n        $('.modal-backdrop').not('.modal-stack').css('z-index', zIndex - 1).addClass('modal-stack');\n      }, 0);\n    }).share();\n  }\n\n  BsModalService.prototype.add = function (modal) {\n    this.modals.push(modal);\n  };\n\n  BsModalService.prototype.remove = function (modal) {\n    var index = this.modals.indexOf(modal);\n    if (index > -1) this.modals.splice(index, 1);\n  };\n\n  BsModalService.prototype.focusNext = function () {\n    var visible = this.modals.filter(function (m) {\n      return m.visible;\n    });\n\n    if (visible.length) {\n      this.$body.addClass('modal-open');\n      visible[visible.length - 1].focus();\n    }\n  };\n\n  BsModalService.prototype.dismissAll = function () {\n    return Promise.all(this.modals.map(function (m) {\n      return m.dismiss();\n    }));\n  };\n\n  BsModalService.decorators = [{\n    type: Injectable\n  }];\n  /** @nocollapse */\n\n  BsModalService.ctorParameters = function () {\n    return [];\n  };\n\n  return BsModalService;\n}();\n\nexport { BsModalService }; //# sourceMappingURL=modal-service.js.map","map":null,"metadata":{},"sourceType":"module"}