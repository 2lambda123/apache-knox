{"ast":null,"code":"import { Component, Input, Output, EventEmitter, ElementRef, HostBinding, NgZone } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { Subject } from 'rxjs/Subject';\nimport 'rxjs/add/observable/fromEvent';\nimport 'rxjs/add/observable/merge';\nimport 'rxjs/add/observable/of';\nimport 'rxjs/add/observable/zip';\nimport 'rxjs/add/operator/do';\nimport 'rxjs/add/operator/filter';\nimport 'rxjs/add/operator/map';\nimport 'rxjs/add/operator/share';\nimport 'rxjs/add/operator/take';\nimport 'rxjs/add/operator/toPromise';\nimport { BsModalHideType, BsModalSize } from './models';\nimport { BsModalService } from './modal-service';\nvar EVENT_SUFFIX = 'ng2-bs3-modal';\nvar SHOW_EVENT_NAME = \"show.bs.modal.\" + EVENT_SUFFIX;\nvar SHOWN_EVENT_NAME = \"shown.bs.modal.\" + EVENT_SUFFIX;\nvar HIDE_EVENT_NAME = \"hide.bs.modal.\" + EVENT_SUFFIX;\nvar HIDDEN_EVENT_NAME = \"hidden.bs.modal.\" + EVENT_SUFFIX;\nvar LOADED_EVENT_NAME = \"loaded.bs.modal.\" + EVENT_SUFFIX;\nvar DATA_KEY = 'bs.modal';\n\nvar BsModalComponent =\n/** @class */\nfunction () {\n  function BsModalComponent(element, service, zone) {\n    var _this = this;\n\n    this.element = element;\n    this.service = service;\n    this.zone = zone;\n    this.overrideSize = null;\n    this.onInternalClose$ = new Subject();\n    this.subscriptions = [];\n    this.visible = false;\n    this.showing = false;\n    this.hiding = false;\n    this.animation = true;\n    this.backdrop = true;\n    this.keyboard = true;\n    this.onShow = new EventEmitter();\n    this.onOpen = new EventEmitter();\n    this.onHide = new EventEmitter();\n    this.onClose = new EventEmitter();\n    this.onDismiss = new EventEmitter();\n    this.onLoaded = new EventEmitter();\n\n    this.setVisible = function (isVisible) {\n      return function () {\n        _this.visible = isVisible;\n        _this.showing = false;\n        _this.hiding = false;\n      };\n    };\n\n    this.setOptions = function (options) {\n      var backdrop = options.backdrop;\n      if (typeof backdrop === 'string' && backdrop !== 'static') backdrop = true;\n      if (options.backdrop !== undefined) _this.options.backdrop = backdrop;\n      if (options.keyboard !== undefined) _this.options.keyboard = options.keyboard;\n    };\n\n    this.service.add(this);\n    this.init();\n  }\n\n  Object.defineProperty(BsModalComponent.prototype, \"options\", {\n    get: function get() {\n      if (!this.$modal) this.init();\n      return this.$modal.data(DATA_KEY).options;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(BsModalComponent.prototype, \"fadeClass\", {\n    get: function get() {\n      return this.animation;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(BsModalComponent.prototype, \"modalClass\", {\n    get: function get() {\n      return true;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(BsModalComponent.prototype, \"roleAttr\", {\n    get: function get() {\n      return 'dialog';\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(BsModalComponent.prototype, \"tabindexAttr\", {\n    get: function get() {\n      return '-1';\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  BsModalComponent.prototype.ngOnInit = function () {\n    this.wireUpEventEmitters();\n  };\n\n  BsModalComponent.prototype.ngAfterViewInit = function () {\n    this.$dialog = this.$modal.find('.modal-dialog');\n  };\n\n  BsModalComponent.prototype.ngOnChanges = function () {\n    this.setOptions({\n      backdrop: this.backdrop,\n      keyboard: this.keyboard\n    });\n  };\n\n  BsModalComponent.prototype.ngOnDestroy = function () {\n    this.onInternalClose$.next(BsModalHideType.Destroy);\n    return this.destroy();\n  };\n\n  BsModalComponent.prototype.focus = function () {\n    this.$modal.trigger('focus');\n  };\n\n  BsModalComponent.prototype.routerCanDeactivate = function () {\n    this.onInternalClose$.next(BsModalHideType.RouteChange);\n    return this.destroy();\n  };\n\n  BsModalComponent.prototype.open = function (size) {\n    this.overrideSize = null;\n    if (BsModalSize.isValidSize(size)) this.overrideSize = size;\n    return this.show().toPromise();\n  };\n\n  BsModalComponent.prototype.close = function (value) {\n    var _this = this;\n\n    this.onInternalClose$.next(BsModalHideType.Close);\n    return this.hide().do(function () {\n      return _this.onClose.emit(value);\n    }).toPromise().then(function () {\n      return value;\n    });\n  };\n\n  BsModalComponent.prototype.dismiss = function () {\n    this.onInternalClose$.next(BsModalHideType.Dismiss);\n    return this.hide().toPromise();\n  };\n\n  BsModalComponent.prototype.getCssClasses = function () {\n    var classes = [];\n\n    if (this.isSmall()) {\n      classes.push('modal-sm');\n    }\n\n    if (this.isLarge()) {\n      classes.push('modal-lg');\n    }\n\n    if (this.cssClass) {\n      classes.push(this.cssClass);\n    }\n\n    return classes.join(' ');\n  };\n\n  BsModalComponent.prototype.isSmall = function () {\n    return this.overrideSize !== BsModalSize.Large && this.size === BsModalSize.Small || this.overrideSize === BsModalSize.Small;\n  };\n\n  BsModalComponent.prototype.isLarge = function () {\n    return this.overrideSize !== BsModalSize.Small && this.size === BsModalSize.Large || this.overrideSize === BsModalSize.Large;\n  };\n\n  BsModalComponent.prototype.show = function () {\n    var _this = this;\n\n    if (this.visible && !this.hiding) return Observable.of(null);\n    this.showing = true;\n    return Observable.create(function (o) {\n      _this.onShown$.take(1).subscribe(function (next) {\n        o.next(next);\n        o.complete();\n      });\n\n      _this.transitionFix();\n\n      _this.$modal.modal('show');\n    });\n  };\n\n  BsModalComponent.prototype.transitionFix = function () {\n    var _this = this; // Fix for shown.bs.modal not firing when .fade is present\n    // https://github.com/twbs/bootstrap/issues/11793\n\n\n    if (this.animation) {\n      setTimeout(function () {\n        _this.$modal.trigger('focus').trigger(SHOWN_EVENT_NAME);\n      }, $.fn.modal['Constructor'].TRANSITION_DURATION);\n    }\n  };\n\n  BsModalComponent.prototype.hide = function () {\n    var _this = this;\n\n    if (!this.visible && !this.showing) return Observable.of(null);\n    this.hiding = true;\n    return Observable.create(function (o) {\n      _this.onHidden$.take(1).subscribe(function (next) {\n        o.next(next);\n        o.complete();\n      });\n\n      _this.$modal.modal('hide');\n    });\n  };\n\n  BsModalComponent.prototype.init = function () {\n    var _this = this;\n\n    this.$modal = jQuery(this.element.nativeElement);\n    this.$modal.appendTo(document.body);\n    this.$modal.modal({\n      show: false\n    });\n    this.onShowEvent$ = Observable.fromEvent(this.$modal, SHOW_EVENT_NAME);\n    this.onShownEvent$ = Observable.fromEvent(this.$modal, SHOWN_EVENT_NAME);\n    this.onHideEvent$ = Observable.fromEvent(this.$modal, HIDE_EVENT_NAME);\n    this.onHiddenEvent$ = Observable.fromEvent(this.$modal, HIDDEN_EVENT_NAME);\n    this.onLoadedEvent$ = Observable.fromEvent(this.$modal, LOADED_EVENT_NAME);\n    var onClose$ = Observable.merge(this.onInternalClose$, this.service.onBackdropClose$, this.service.onKeyboardClose$);\n    this.onHide$ = Observable.zip(this.onHideEvent$, onClose$).map(function (x) {\n      return {\n        event: x[0],\n        type: x[1]\n      };\n    });\n    this.onHidden$ = Observable.zip(this.onHiddenEvent$, onClose$).map(function (x) {\n      return x[1];\n    }).do(this.setVisible(false)).do(function () {\n      return _this.service.focusNext();\n    }).share();\n    this.onShown$ = this.onShownEvent$.do(this.setVisible(true)).share();\n    this.onDismiss$ = this.onHidden$.filter(function (x) {\n      return x !== BsModalHideType.Close;\n    }); // Start watching for events\n\n    (_a = this.subscriptions).push.apply(_a, [this.onShown$.subscribe(function () {}), this.onHidden$.subscribe(function () {}), this.service.onModalStack$.subscribe(function () {})]);\n\n    var _a;\n  };\n\n  BsModalComponent.prototype.wireUpEventEmitters = function () {\n    this.wireUpEventEmitter(this.onShow, this.onShowEvent$);\n    this.wireUpEventEmitter(this.onOpen, this.onShown$);\n    this.wireUpEventEmitter(this.onHide, this.onHide$);\n    this.wireUpEventEmitter(this.onDismiss, this.onDismiss$);\n    this.wireUpEventEmitter(this.onLoaded, this.onLoadedEvent$);\n  };\n\n  BsModalComponent.prototype.wireUpEventEmitter = function (emitter, stream$) {\n    var _this = this;\n\n    if (emitter.observers.length === 0) return;\n    var sub = stream$.subscribe(function (next) {\n      _this.zone.run(function () {\n        emitter.next(next);\n      });\n    });\n    this.subscriptions.push(sub);\n  };\n\n  BsModalComponent.prototype.destroy = function () {\n    var _this = this;\n\n    return this.hide().do(function () {\n      _this.service.remove(_this);\n\n      _this.subscriptions.forEach(function (s) {\n        return s.unsubscribe();\n      });\n\n      _this.subscriptions = [];\n\n      if (_this.$modal) {\n        _this.$modal.data(DATA_KEY, null);\n\n        _this.$modal.remove();\n\n        _this.$modal = null;\n      }\n    }).toPromise();\n  };\n\n  BsModalComponent.decorators = [{\n    type: Component,\n    args: [{\n      selector: 'bs-modal',\n      template: \"\\n        <div class=\\\"modal-dialog\\\" [ngClass]=\\\"getCssClasses()\\\">\\n            <div class=\\\"modal-content\\\">\\n                <ng-content></ng-content>\\n            </div>\\n        </div>\\n    \"\n    }]\n  }];\n  /** @nocollapse */\n\n  BsModalComponent.ctorParameters = function () {\n    return [{\n      type: ElementRef\n    }, {\n      type: BsModalService\n    }, {\n      type: NgZone\n    }];\n  };\n\n  BsModalComponent.propDecorators = {\n    'animation': [{\n      type: Input\n    }],\n    'backdrop': [{\n      type: Input\n    }],\n    'keyboard': [{\n      type: Input\n    }],\n    'size': [{\n      type: Input\n    }],\n    'cssClass': [{\n      type: Input\n    }],\n    'onShow': [{\n      type: Output\n    }],\n    'onOpen': [{\n      type: Output\n    }],\n    'onHide': [{\n      type: Output\n    }],\n    'onClose': [{\n      type: Output\n    }],\n    'onDismiss': [{\n      type: Output\n    }],\n    'onLoaded': [{\n      type: Output\n    }],\n    'fadeClass': [{\n      type: HostBinding,\n      args: ['class.fade']\n    }],\n    'modalClass': [{\n      type: HostBinding,\n      args: ['class.modal']\n    }],\n    'roleAttr': [{\n      type: HostBinding,\n      args: ['attr.role']\n    }],\n    'tabindexAttr': [{\n      type: HostBinding,\n      args: ['attr.tabindex']\n    }]\n  };\n  return BsModalComponent;\n}();\n\nexport { BsModalComponent }; //# sourceMappingURL=modal.js.map","map":null,"metadata":{},"sourceType":"module"}