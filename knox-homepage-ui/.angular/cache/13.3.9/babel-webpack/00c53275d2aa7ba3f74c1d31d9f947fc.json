{"ast":null,"code":"import _classCallCheck from \"/Users/mbalazs/projects/knox/knox-homepage-ui/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/mbalazs/projects/knox/knox-homepage-ui/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { ActivatedRoute } from '@angular/router';\nimport swal from 'sweetalert';\nimport 'rxjs/add/operator/toPromise';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport var HomepageService = /*#__PURE__*/(function () {\n  var HomepageService = /*#__PURE__*/function () {\n    function HomepageService(http, route) {\n      _classCallCheck(this, HomepageService);\n\n      this.http = http;\n      this.route = route;\n      this.apiUrl = window.location.pathname.replace(new RegExp('home/.*'), 'api/v1/metadata/');\n      this.sessionUrl = window.location.pathname.replace(new RegExp('home/.*'), 'session/api/v1/sessioninfo');\n      this.generalProxyInformationUrl = this.apiUrl + 'info';\n      this.publicCertUrl = this.apiUrl + 'publicCert?type=';\n      this.topologiesUrl = this.apiUrl + 'topologies';\n    }\n\n    _createClass(HomepageService, [{\n      key: \"getGeneralProxyInformation\",\n      value: function getGeneralProxyInformation() {\n        var _this = this;\n\n        var headers = new HttpHeaders();\n        headers = this.addJsonHeaders(headers);\n        return this.http.get(this.generalProxyInformationUrl, {\n          headers: headers\n        }).toPromise().then(function (response) {\n          return response['generalProxyInfo'];\n        }).catch(function (err) {\n          console.debug('HomepageService --> getGeneralProxyInformation() --> ' + _this.generalProxyInformationUrl + '\\n  error: ' + err.message);\n\n          if (err.status === 401) {\n            window.location.assign(document.location.pathname);\n          } else {\n            return _this.handleError(err);\n          }\n        });\n      }\n    }, {\n      key: \"getTopologies\",\n      value: function getTopologies() {\n        var _this2 = this;\n\n        var headers = new HttpHeaders();\n        headers = this.addJsonHeaders(headers);\n        return this.http.get(this.topologiesUrl, {\n          headers: headers\n        }).toPromise().then(function (response) {\n          return response['topologyInformations'].topologyInformation;\n        }).catch(function (err) {\n          console.debug('HomepageService --> getTopologies() --> ' + _this2.topologiesUrl + '\\n  error: ' + err.message);\n\n          if (err.status === 401) {\n            window.location.assign(document.location.pathname);\n          } else {\n            return _this2.handleError(err);\n          }\n        });\n      }\n    }, {\n      key: \"getSessionInformation\",\n      value: function getSessionInformation() {\n        var _this3 = this;\n\n        var headers = new HttpHeaders();\n        headers = this.addJsonHeaders(headers);\n        return this.http.get(this.sessionUrl, {\n          headers: headers\n        }).toPromise().then(function (response) {\n          return response['sessioninfo'];\n        }).catch(function (err) {\n          console.debug('HomepageService --> getSessionInformation() --> ' + _this3.sessionUrl + '\\n  error: ' + err.message);\n\n          if (err.status === 401) {\n            window.location.assign(document.location.pathname);\n          } else {\n            return _this3.handleError(err);\n          }\n        });\n      }\n    }, {\n      key: \"logout\",\n      value: function logout(logoutUrl) {\n        var _this4 = this;\n\n        var headers = new HttpHeaders();\n        headers = this.addJsonHeaders(headers);\n        return this.http.get(logoutUrl, {\n          headers: headers\n        }).toPromise().then(function (response) {\n          return response['loggedOut'];\n        }).catch(function (err) {\n          console.debug('HomepageService --> logout() --> ' + logoutUrl + '\\n  error: ' + err.message);\n\n          if (err.status === 401) {\n            window.location.assign(document.location.pathname);\n          } else {\n            return _this4.handleError(err);\n          }\n        });\n      }\n    }, {\n      key: \"getProfile\",\n      value: function getProfile(profileName) {\n        var _this5 = this;\n\n        var headers = new HttpHeaders();\n        headers = this.addJsonHeaders(headers);\n        return this.http.get(this.apiUrl + '/profiles/' + profileName, {\n          headers: headers\n        }).toPromise().then(function (response) {\n          return response;\n        }).catch(function (err) {\n          console.debug('HomepageService --> getProfile() --> ' + _this5.apiUrl + '/profiles/' + profileName + '\\n  error: ' + err.message);\n\n          if (err.status === 401) {\n            window.location.assign(document.location.pathname);\n          } else {\n            return _this5.handleError(err);\n          }\n        });\n      }\n    }, {\n      key: \"addJsonHeaders\",\n      value: function addJsonHeaders(headers) {\n        return this.addCsrfHeaders(headers.append('Accept', 'application/json').append('Content-Type', 'application/json'));\n      }\n    }, {\n      key: \"addCsrfHeaders\",\n      value: function addCsrfHeaders(headers) {\n        return this.addXHRHeaders(headers.append('X-XSRF-Header', 'homepage'));\n      }\n    }, {\n      key: \"addXHRHeaders\",\n      value: function addXHRHeaders(headers) {\n        return headers.append('X-Requested-With', 'XMLHttpRequest');\n      }\n    }, {\n      key: \"handleError\",\n      value: function handleError(error) {\n        //location.reload();\n        var refresh;\n        this.route.queryParams.subscribe(function (params) {\n          refresh = params['refresh'];\n          console.debug('refresh = ' + refresh);\n\n          if (refresh) {\n            console.debug('Refreshing page...', window.location.href);\n            var url = window.location.pathname.replace(new RegExp('refresh=1/.*'), '?'); //var url = window.location.pathname;\n            //window.location.assign(url);\n\n            window.location.reload();\n          }\n        });\n        swal('Oops!', 'Something went wrong!\\n' + (error.error ? error.error : error.statusText), 'error');\n        return Promise.reject(error.message || error);\n      }\n    }]);\n\n    return HomepageService;\n  }();\n\n  HomepageService.ɵfac = function HomepageService_Factory(t) {\n    return new (t || HomepageService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ActivatedRoute));\n  };\n\n  HomepageService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: HomepageService,\n    factory: HomepageService.ɵfac\n  });\n  return HomepageService;\n})();","map":null,"metadata":{},"sourceType":"module"}