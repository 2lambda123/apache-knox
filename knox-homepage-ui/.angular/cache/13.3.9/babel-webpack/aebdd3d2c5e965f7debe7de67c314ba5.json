{"ast":null,"code":"import _createClass from \"/Users/mbalazs/projects/knox/knox-homepage-ui/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"/Users/mbalazs/projects/knox/knox-homepage-ui/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Injectable, NgModule } from '@angular/core';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n// Whether the current platform supports the V8 Break Iterator. The V8 check\n// is necessary to detect all Blink based browsers.\n\nimport * as ɵngcc0 from '@angular/core';\nvar hasV8BreakIterator = typeof Intl !== 'undefined' &&\n/** @type {?} */\nIntl.v8BreakIterator;\n/**\n * Service to detect the current platform by comparing the userAgent strings and\n * checking browser-specific global properties.\n */\n\nvar Platform = /*#__PURE__*/(function () {\n  var Platform = /*#__PURE__*/_createClass(function Platform() {\n    _classCallCheck(this, Platform);\n\n    /**\n     * Whether the Angular application is being rendered in the browser.\n     */\n    this.isBrowser = typeof document === 'object' && !!document;\n    /**\n     * Whether the current browser is Microsoft Edge.\n     */\n\n    this.EDGE = this.isBrowser && /(edge)/i.test(navigator.userAgent);\n    /**\n     * Whether the current rendering engine is Microsoft Trident.\n     */\n\n    this.TRIDENT = this.isBrowser && /(msie|trident)/i.test(navigator.userAgent);\n    /**\n     * Whether the current rendering engine is Blink.\n     */\n\n    this.BLINK = this.isBrowser && !!(\n    /** @type {?} */\n    window.chrome || hasV8BreakIterator) && typeof CSS !== 'undefined' && !this.EDGE && !this.TRIDENT;\n    /**\n     * Whether the current rendering engine is WebKit.\n     */\n\n    this.WEBKIT = this.isBrowser && /AppleWebKit/i.test(navigator.userAgent) && !this.BLINK && !this.EDGE && !this.TRIDENT;\n    /**\n     * Whether the current platform is Apple iOS.\n     */\n\n    this.IOS = this.isBrowser && /iPad|iPhone|iPod/.test(navigator.userAgent) && !\n    /** @type {?} */\n    window.MSStream;\n    /**\n     * Whether the current browser is Firefox.\n     */\n\n    this.FIREFOX = this.isBrowser && /(firefox|minefield)/i.test(navigator.userAgent);\n    /**\n     * Whether the current platform is Android.\n     */\n\n    this.ANDROID = this.isBrowser && /android/i.test(navigator.userAgent) && !this.TRIDENT;\n    /**\n     * Whether the current browser is Safari.\n     */\n\n    this.SAFARI = this.isBrowser && /safari/i.test(navigator.userAgent) && this.WEBKIT;\n  });\n\n  Platform.ɵfac = function Platform_Factory(t) {\n    return new (t || Platform)();\n  };\n\n  Platform.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: Platform,\n    factory: Platform.ɵfac\n  });\n  /** @nocollapse */\n\n  return Platform;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * Cached result of whether the user's browser supports passive event listeners.\n */\n\n\nvar supportsPassiveEvents;\n/**\n * Checks whether the user's browser supports passive event listeners.\n * See: https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md\n * @return {?}\n */\n\nfunction supportsPassiveEventListeners() {\n  if (supportsPassiveEvents == null && typeof window !== 'undefined') {\n    try {\n      window.addEventListener('test',\n      /** @type {?} */\n      null, Object.defineProperty({}, 'passive', {\n        get: function get() {\n          return supportsPassiveEvents = true;\n        }\n      }));\n    } finally {\n      supportsPassiveEvents = supportsPassiveEvents || false;\n    }\n  }\n\n  return supportsPassiveEvents;\n}\n/**\n * Cached result Set of input types support by the current browser.\n */\n\n\nvar supportedInputTypes;\n/**\n * Types of `<input>` that *might* be supported.\n */\n\nvar candidateInputTypes = ['color', 'button', 'checkbox', 'date', 'datetime-local', 'email', 'file', 'hidden', 'image', 'month', 'number', 'password', 'radio', 'range', 'reset', 'search', 'submit', 'tel', 'text', 'time', 'url', 'week'];\n/**\n * @return {?} The input types supported by this browser.\n */\n\nfunction getSupportedInputTypes() {\n  // Result is cached.\n  if (supportedInputTypes) {\n    return supportedInputTypes;\n  } // We can't check if an input type is not supported until we're on the browser, so say that\n  // everything is supported when not on the browser. We don't use `Platform` here since it's\n  // just a helper function and can't inject it.\n\n\n  if (typeof document !== 'object' || !document) {\n    supportedInputTypes = new Set(candidateInputTypes);\n    return supportedInputTypes;\n  }\n\n  var\n  /** @type {?} */\n  featureTestInput = document.createElement('input');\n  supportedInputTypes = new Set(candidateInputTypes.filter(function (value) {\n    featureTestInput.setAttribute('type', value);\n    return featureTestInput.type === value;\n  }));\n  return supportedInputTypes;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nvar PlatformModule = /*#__PURE__*/(function () {\n  var PlatformModule = /*#__PURE__*/_createClass(function PlatformModule() {\n    _classCallCheck(this, PlatformModule);\n  });\n\n  PlatformModule.ɵfac = function PlatformModule_Factory(t) {\n    return new (t || PlatformModule)();\n  };\n\n  PlatformModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: PlatformModule\n  });\n  PlatformModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    providers: [Platform]\n  });\n  /** @nocollapse */\n\n  return PlatformModule;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { Platform, supportsPassiveEventListeners, getSupportedInputTypes, PlatformModule }; //# sourceMappingURL=platform.js.map","map":null,"metadata":{},"sourceType":"module"}